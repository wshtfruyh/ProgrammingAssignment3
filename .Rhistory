install.packages("swirl")
library(datasets)
data(iris)
head(iris)
sepalL <- iris(,iris$Species = virginica)
lapply(iris$Species, function(elem) elem[virginica])
sepalL <- iris[,iris$Species[[virginica]]]
sepalL <- iris(,iris$Species == virginica)
sepalL <- iris[, iris$Species == virginica]
sepalL <- iris[, iris$Species == "virginica"]
iris[iris$Species==virginica]
iris[iris$Species==virginica,]
iris[iris$Species=='virginica,]
iris[iris$Species=='virginica',]
mean(iris[iris$Species=='virginica',])
sepal <- iris[iris$Species=='virginica',]
mean(iris$Sepal.Length, sepal)
mean(sepal, iris$Sepal.Length)
lapply(sepal, mean)
colMeans(iris)
rowMeans(risi[,1:4])
rowMeans(iris[,1:4])
apply(iris[,1:4],1,mean)
apply(iris, 2, mean)
apply(iris, 1, mean)
rowMeans(iris[, 1:4])
apply(iris, 2, mean)
apply(iris[, 1:4], 1, mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
split(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
debug(ls)
ls
ls
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
exit()
bye()
undebug(ls)
source('D:/Dropbox (JUS lab)/Angela etc/Bioinformatics/r programming for data science/w3assigRA.R')
source('D:/Dropbox (JUS lab)/Angela etc/Bioinformatics/r programming for data science/w3assigRA.R')
source('D:/Dropbox (JUS lab)/Angela etc/Bioinformatics/r programming for data science/w3assigRA.R')
source('D:/Dropbox (JUS lab)/Angela etc/Bioinformatics/r programming for data science/w3assigRA.R')
library(matlib)
matlib
?solve
library(mass)
library(MASS)
?solve
matrix(3,3)
matrix(4,2,3_
matrix(4,2,3)
matrix(c(1:6),2,3)
m <- matrix(c(1:6),2,3)
solve(m)
m <- matrix(c(1:9),3,3)
solve(m)
solve(m, tol, LINPACK = FALSE)
inverse.rle(m)
ginv(m)
solve(m)
m
source('D:/Dropbox (JUS lab)/Angela etc/Bioinformatics/r programming for data science/w3assigRA.R')
makeCacheMatrix(m)
m
ohya <- makeCacheMatrix(m)
ohya
source('D:/Dropbox (JUS lab)/Angela etc/Bioinformatics/r programming for data science/w3assigRA.R')
source('D:/Dropbox (JUS lab)/Angela etc/Bioinformatics/r programming for data science/w3assigRA.R')
source('D:/Dropbox (JUS lab)/Angela etc/Bioinformatics/r programming for data science/w3assigRA.R')
f <- function() {
x <- 1
y <- 2
c(x, y)
}
f()
rm(f)
x <- 2
g <- function() {
y <- 1
c(x, y)
}
g()
rm(x, g)
j <- function(x) {
y <- 2
function() {
c(x, y)
}
}
k <- j(1)
k()
rm(j, k)
l <- function(x) x + 1
l
l(2)
m <- function() {
l <- function(x) x * 2
l(10)
}
l
m
m(2)
m()
m(2)
> m <- function() {
+     l <- function(x) x * 2
+     l(5)
+ }
> m <- function() {
+     l <- function(x) x * 2
+     l(5)
+ }
> m <- function() {
l <- function(x) x * 2
l(5)
}
source('D:/Dropbox (JUS lab)/Angela etc/Bioinformatics/r programming for data science/w3assigRA.R')
m
m <- matrix(c(1:9)3,3)
m <- matrix(c(1:9),3,3)
m
makeCacheMatrix(m)
source('D:/Dropbox (JUS lab)/Angela etc/Bioinformatics/r programming for data science/w3assigRA.R')
source('D:/Dropbox (JUS lab)/Angela etc/Bioinformatics/r programming for data science/w3assigRA.R')
makeCacheMatrix(m)
source('D:/Dropbox (JUS lab)/Angela etc/Bioinformatics/r programming for data science/w3assigRA.R')
makeCacheMatrix(m)
source('D:/Dropbox (JUS lab)/Angela etc/Bioinformatics/r programming for data science/w3assigRA.R')
source('D:/Dropbox (JUS lab)/Angela etc/Bioinformatics/r programming for data science/w3assigRA.R')
?is.null
source('D:/Dropbox (JUS lab)/Angela etc/Bioinformatics/r programming for data science/w3assigRA.R')
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
m <- matrix(c(1:12),3,4)
s <- makeCacheMatrix(m)
s(5)
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
cachesolve(m)
cacheSolve(m)
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m)
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m)
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m)
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m)
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m)
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m)
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m)
is.recursive(x)
is.recursive(getinv()
)
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m)
is.recursive(m)
is.atomic(m)
m
data.frame(m)
matt <- data.frame(m)
cacheSolve(matt)
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
cacheSolve(matt)
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
cacheSolve(matt)
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m)
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m)
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m)
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m)
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m)
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m)
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m)
cacheSolve(matt)
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
cacheSolve(matt)
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
cacheSolve(matt)
matt
matrix(matt)
funs <- makeCacheMatrix()
funs$set(matrix(1:4, 2))
funs$get()
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
funs <- makeCacheMatrix()
funs$set(matrix(1:4, 2))
funs$get()
funs$setInverse()
funs$getInverse()
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
funs$getinv()
funs$setInverse()
funs$getInverse()
funs$setinv()
funs$getinv()
ls(environment(funs$set))
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
?matrix
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
test$set(matrix(10:13, 2))
test$get()
test$setinv()
test$getinv()
ls(environment(test$set))
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/ryuhj/ProgrammingAssignment2/cachematrix.R')
test$set(matrix(10:13, 2))
test$setinv()
test$getinv()
matrix(10:13,2))
matrix(10:13,2)
set.seed(1)
rpois(5,2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
plot(y)
plot(e)
plot(x)
plot(e)
plot(y)
setwd("D:/Dropbox (JUS lab)/Angela etc/Bioinformatics/r programming for data science/Assignment3")
best("SC", "heart attack")
read.csv(outcome-of-care-measures.csv)
read.csv("outcome-of-care-measures.csv")
options(max.print=50)
str("outcome-of-care-measures.csv")
outcome <- read.csv("outcome-of-care-measures.csv")
str(outcome)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses= "character")
head(outcome)
head(outcome)
head(outcome)
ncol(outcome)
names(outcome)
outcome[,11] <- as.numeric(outcome[,11])
hist(outcome[,11])
# function named "best": has two arguments. 2 character abbreviated name of a
# check that state and outcome are valid. hospitals without valid
# return hospital name in that state with lowest 30d death rate
return(outcome$Hospital.Name)
validoutcome <- min(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, na.rm = FALSE)
head(validoutcome)
summary(validoutcome)
validoutcome <- min(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, na.rm = TRUE)
summary(validoutcome)
source('D:/Dropbox (JUS lab)/Angela etc/Bioinformatics/r programming for data science/Assignment3/best.R')
source('D:/Dropbox (JUS lab)/Angela etc/Bioinformatics/r programming for data science/Assignment3/best.R')
